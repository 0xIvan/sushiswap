generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Token {
  id        String   @id // network_address
  address  String
  network  String
  chainId  String
  name     String // TODO: constraints? if subgraph would return "", "", 0? success false?
  symbol   String
  decimals Int

  generatedAt DateTime @default(now())

  price  TokenPrice?
  pools0 Pool[]      @relation("token0")
  pools1 Pool[]      @relation("token1")

  // @@id([chainId, address])
  @@unique([chainId, address])
  @@index(fields: [address, network, name, symbol])
}

model TokenPrice {
  id        String   @id // network_address
  address       String
  network       String
  chainId       String
  derivedNative Decimal
  lastUsdPrice  Decimal

  generatedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  token Token @relation(fields: [chainId, address], references: [chainId, address])

  @@unique([chainId, address])
  @@index(fields: [address, network])
}

model Pool {
  id        String   @id // network_address
  address  String
  name     String
  network  String
  chainId  String
  protocol String
  version  String
  type     String
  token0   Token  @relation("token0", fields: [chainId, token0Id], references: [chainId, address])
  token0Id String
  token1   Token  @relation("token1", fields: [chainId, token1Id], references: [chainId, address])
  token1Id String

  swapFee     Float?
  twapEnabled Boolean?

  reserve0        String //BigInt 	@db.BigInt // Liquidity of token0 // TODO: When prisma 4.6.0 is released, use BigInt instead
  reserve1        String //BigInt 	@db.BigInt // Liquidity of token1 // TODO: When prisma 4.6.0 is released, use BigInt instead
  totalSupply     String //BigInt 	@db.BigInt // Liquidity, Total supply of all LP in this pool // TODO: When prisma 4.6.0 is released, use BigInt instead
  liquidityUSD    String // liquidity in USD
  liquidityNative String // liquidity in native

  volumeUSD    String // volume in USD
  volumeNative String // volume in native

  token0Price String // Price of token0 in token1
  token1Price String // Price of token1 in token0

  // createdAtTimestamp   DateTime
  createdAtBlockNumber String //BigInt 	@db.BigInt // TODO: When prisma 4.6.0 is released, use BigInt instead
  generatedAt          DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // @@id([chainId, address])
  @@unique([chainId, address])
  @@index(fields: [token0Id, token1Id, address], name: "pool_index")
}

// model Token {
//   id    String     @id
//   name String // TODO: default values here? if subgraph would return "", "", 0? success false?
//   symbol String
//   decimals Int
// }

// TOKEN AND POOLS

// _generatedAtTimestamp

// IDEAS:

// TokenProtocol
// network, 
