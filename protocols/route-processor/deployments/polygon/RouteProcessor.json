{
  "address": "0x7CD29170e8fA3fE5204624deDE5A66F4e8161741",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bentoBox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "route",
          "type": "bytes"
        }
      ],
      "name": "processRoute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x02732665d0e6894329dd9d6c2fba431ffb056a9ebdae622f4153149ad75caa67",
  "receipt": {
    "to": null,
    "from": "0xf87BC5535602077d340806D71f805EA9907a843D",
    "contractAddress": "0x7CD29170e8fA3fE5204624deDE5A66F4e8161741",
    "transactionIndex": 39,
    "gasUsed": "1902640",
    "logsBloom": "0x
    "blockHash": "0xbaf48af6974b7a2298d7751692f47b436fcb0ac71bd5de9cc36c9b8be009f6a8",
    "transactionHash": "0x02732665d0e6894329dd9d6c2fba431ffb056a9ebdae622f4153149ad75caa67",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 38288223,
        "transactionHash": "0x02732665d0e6894329dd9d6c2fba431ffb056a9ebdae622f4153149ad75caa67",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f87bc5535602077d340806d71f805ea9907a843d",
          "0x000000000000000000000000b9ede6f94d192073d8eaf85f8db677133d483249"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000cc0406b937f740000000000000000000000000000000000000000000000000720b99773ab5059f000000000000000000000000000000000000000000000be8b02cbf95d3843c12000000000000000000000000000000000000000000000000713f9570817d0e5f000000000000000000000000000000000000000000000be8b0f8c39c8cbc3352",
        "logIndex": 272,
        "blockHash": "0xbaf48af6974b7a2298d7751692f47b436fcb0ac71bd5de9cc36c9b8be009f6a8"
      }
    ],
    "blockNumber": 38288223,
    "cumulativeGasUsed": "9914821",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0319000133d3AdA02600f0875d2cf03D442C3367"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f041beafb9fb0543a179f3cb1476375",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bentoBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"route\",\"type\":\"bytes\"}],\"name\":\"processRoute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Okavango\",\"kind\":\"dev\",\"methods\":{\"processRoute(address,uint256,address,uint256,address,bytes)\":{\"params\":{\"amountIn\":\"Amount of the input token\",\"amountOutMin\":\"Minimum amount of the output token\",\"tokenIn\":\"Address of the input token\",\"tokenOut\":\"Address of the output token\"},\"returns\":{\"amountOut\":\"Actual amount of the output token\"}}},\"title\":\"A route processor for the Sushi Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"processRoute(address,uint256,address,uint256,address,bytes)\":{\"notice\":\"Processes the route generated off-chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RouteProcessor.sol\":\"RouteProcessor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/InputStream.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.10;\\n\\nlibrary InputStream {\\n  function createStream(bytes memory data) internal pure returns (uint256 stream) {\\n    assembly {\\n      stream := mload(0x40)\\n      mstore(0x40, add(stream, 64))\\n      mstore(stream, data)\\n      let length := mload(data)\\n      mstore(add(stream, 32), add(data, length))\\n    }\\n  }\\n\\n  function isNotEmpty(uint256 stream) internal pure returns (bool) {\\n    uint256 pos;\\n    uint256 finish;\\n    assembly {\\n      pos := mload(stream)\\n      finish := mload(add(stream, 32))\\n    }\\n    return pos < finish;\\n  }\\n\\n  function readUint8(uint256 stream) internal pure returns (uint8 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 1)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint16(uint256 stream) internal pure returns (uint16 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 2)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint32(uint256 stream) internal pure returns (uint32 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 4)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readUint(uint256 stream) internal pure returns (uint256 res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 32)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readAddress(uint256 stream) internal pure returns (address res) {\\n    assembly {\\n      let pos := mload(stream)\\n      pos := add(pos, 20)\\n      res := mload(pos)\\n      mstore(stream, pos)\\n    }\\n  }\\n\\n  function readBytes(uint256 stream) internal pure returns (bytes memory res) {\\n    assembly {\\n      let pos := mload(stream)\\n      res := add(pos, 32)\\n      let length := mload(res)\\n      mstore(stream, add(res, length))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xac36b2e0f406a6000bf69609b28628ab4371996f8abb00abdbce17fdea849629\",\"license\":\"UNLICENSED\"},\"contracts/RouteProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.10;\\n\\nimport '../interfaces/IUniswapV2Pair.sol';\\nimport '../interfaces/IBentoBoxMinimal.sol';\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/IWETH.sol';\\nimport './InputStream.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\naddress constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n/// @title A route processor for the Sushi Aggregator\\n/// @author Okavango\\ncontract RouteProcessor {\\n  using SafeERC20 for IERC20;\\n  using InputStream for uint256;\\n\\n  IBentoBoxMinimal public immutable bentoBox;\\n\\n  constructor(address _bentoBox) {\\n    bentoBox = IBentoBoxMinimal(_bentoBox);\\n  }\\n\\n  /// @notice For native unwrapping\\n  receive() external payable {}\\n\\n  /// @notice Processes the route generated off-chain\\n  /// @param tokenIn Address of the input token\\n  /// @param amountIn Amount of the input token\\n  /// @param tokenOut Address of the output token\\n  /// @param amountOutMin Minimum amount of the output token\\n  /// @return amountOut Actual amount of the output token\\n  function processRoute(\\n    address tokenIn,\\n    uint256 amountIn,\\n    address tokenOut,\\n    uint256 amountOutMin,\\n    address to,\\n    bytes memory route\\n  ) external payable returns (uint256 amountOut) {\\n    require(tx.origin == msg.sender, 'Call from not EOA'); // Prevents reentrance\\n\\n    uint256 amountInAcc = 0;\\n    uint256 balanceInitial = tokenOut == NATIVE_ADDRESS ? \\n      address(to).balance : IERC20(tokenOut).balanceOf(to);\\n\\n    uint256 stream = InputStream.createStream(route);\\n    while (stream.isNotEmpty()) {\\n      uint8 commandCode = stream.readUint8();\\n      if (commandCode < 20) {\\n        if (commandCode == 10)\\n          swapUniswapPool(stream); // Sushi/Uniswap pool swap\\n        else if (commandCode == 4)\\n          distributeERC20Shares(stream); // distribute ERC20 tokens from this router to pools\\n        else if (commandCode == 3)\\n          amountInAcc += distributeERC20Amounts(stream, tokenIn); // initial distribution\\n        else if (commandCode == 5)\\n          amountInAcc += wrapAndDistributeERC20Amounts(stream); // wrap natives and initial distribution        \\n        else if (commandCode == 6) unwrapNative(to, stream);\\n        else revert('Unknown command code');\\n      } else if (commandCode < 24) {\\n        if (commandCode == 20) bentoDepositAmountFromBento(stream, tokenIn);\\n        else if (commandCode == 21) swapTrident(stream);\\n        else if (commandCode == 23) bentoWithdrawShareFromRP(stream, tokenIn);\\n        else revert('Unknown command code');\\n      } else {\\n        if (commandCode == 24) amountInAcc += distributeBentoShares(stream, tokenIn);\\n        else if (commandCode == 25) distributeBentoPortions(stream);\\n        else if (commandCode == 26) bentoDepositAllFromBento(stream);\\n        else if (commandCode == 27) bentoWithdrawAllFromRP(stream);\\n        else revert('Unknown command code');\\n      }\\n    }\\n\\n    require(amountInAcc == amountIn, 'Wrong amountIn value');\\n    uint256 balanceFinal = tokenOut == NATIVE_ADDRESS ? \\n      address(to).balance : IERC20(tokenOut).balanceOf(to);\\n    require(balanceFinal >= balanceInitial + amountOutMin, 'Minimal ouput balance violation');\\n\\n    amountOut = balanceFinal - balanceInitial;\\n  }\\n\\n  /// @notice Transfers input tokens sent to BentoBox to a pool\\n  /// @notice Expected to be called for initial liquidity transfer from user to BentoBox, so we know exact amounts\\n  /// @param stream [Pool, Amount]. Pool into which an amount of tokens will be transferred\\n  /// @param token Address of the token to transfer\\n  function bentoDepositAmountFromBento(uint256 stream, address token) private {\\n    address to = stream.readAddress();\\n    uint256 amount = stream.readUint();\\n    bentoBox.deposit(token, address(bentoBox), to, amount, 0);\\n  }\\n\\n  /// @notice Transfers all available input tokens from BentoBox to a pool\\n  /// @param stream [Pool, Token]. Pool into which all tokens will be transferred \\n  function bentoDepositAllFromBento(uint256 stream) private {\\n    address to = stream.readAddress();\\n    address token = stream.readAddress();\\n\\n    uint256 amount = IERC20(token).balanceOf(address(bentoBox)) +\\n      bentoBox.strategyData(token).balance -\\n      bentoBox.totals(token).elastic;\\n    bentoBox.deposit(token, address(bentoBox), to, amount, 0);\\n  }\\n\\n  /// @notice Withdraws BentoBox tokens from BentoBox to an address\\n  /// @param stream [To, Amount]. Destination where an amount of token will be transferred\\n  /// @param token Token to transfer\\n  function bentoWithdrawShareFromRP(uint256 stream, address token) private {\\n    address to = stream.readAddress();\\n    uint256 amount = stream.readUint();\\n    bentoBox.withdraw(token, address(this), to, amount, 0);\\n  }\\n\\n  /// @notice Withdraws all available BentoBox tokens from BentoBox to an address\\n  /// @param stream [Token, To]. Token which will be transferred to a destination\\n  function bentoWithdrawAllFromRP(uint256 stream) private {\\n    address token = stream.readAddress();\\n    address to = stream.readAddress();\\n    uint256 amount = bentoBox.balanceOf(token, address(this));\\n    bentoBox.withdraw(token, address(this), to, 0, amount);\\n  }\\n\\n  /// @notice Performs a Trident pool swap\\n  /// @param stream [Pool, SwapData]. Pool against a swap defined by SwapData will be executed\\n  function swapTrident(uint256 stream) private {\\n    address pool = stream.readAddress();\\n    bytes memory swapData = stream.readBytes();\\n    IPool(pool).swap(swapData);\\n  }\\n\\n  /// @notice Performs a Sushi/UniswapV2 pool swap\\n  /// @param stream [Pool, TokenIn, Direction, To]\\n  /// @return amountOut Amount of the output token\\n  function swapUniswapPool(uint256 stream) private returns (uint256 amountOut) {\\n    address pool = stream.readAddress();\\n    address tokenIn = stream.readAddress();\\n    uint8 direction = stream.readUint8();\\n    address to = stream.readAddress();\\n\\n    (uint256 r0, uint256 r1, ) = IUniswapV2Pair(pool).getReserves();\\n    require(r0 > 0 && r1 > 0, 'Wrong pool reserves');\\n    (uint256 reserveIn, uint256 reserveOut) = direction == 1 ? (r0, r1) : (r1, r0);\\n\\n    uint256 amountIn = IERC20(tokenIn).balanceOf(pool) - reserveIn;\\n    uint256 amountInWithFee = amountIn * 997;\\n    amountOut = (amountInWithFee * reserveOut) / (reserveIn * 1000 + amountInWithFee);\\n    (uint256 amount0Out, uint256 amount1Out) = direction == 1 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n    IUniswapV2Pair(pool).swap(amount0Out, amount1Out, to, new bytes(0));\\n  }\\n\\n  /// @notice Distributes input ERC20 tokens from msg.sender to addresses. Tokens should be approved\\n  /// @notice Expected to be called for initial liquidity transfer from the user to pools, so we know exact amounts\\n  /// @param stream [ArrayLength, ...[To, Amount][]]. An array of destinations and token amounts\\n  /// @param token Token to distribute\\n  /// @return amountTotal Total amount distributed\\n  function distributeERC20Amounts(uint256 stream, address token) private returns (uint256 amountTotal) {\\n    uint8 num = stream.readUint8();\\n    amountTotal = 0;\\n    for (uint256 i = 0; i < num; ++i) {\\n      address to = stream.readAddress();\\n      uint256 amount = stream.readUint();\\n      amountTotal += amount;\\n      IERC20(token).safeTransferFrom(msg.sender, to, amount);\\n    }\\n  }\\n\\n  /// @notice Wraps all native inputs and distributes wrapped ERC20 tokens from RouteProcessor to addresses\\n  /// @notice Expected to be called for initial liquidity transfer from the user to pools, so we know exact amounts\\n  /// @param stream [WrapToken, ArrayLength, ...[To, Amount][]]. An array of destinations and token amounts\\n  /// @return amountTotal Total amount distributed\\n  function wrapAndDistributeERC20Amounts(uint256 stream) private returns (uint256 amountTotal) {\\n    address token = stream.readAddress();\\n    IWETH(token).deposit{value: msg.value}();\\n    uint8 num = stream.readUint8();\\n    amountTotal = 0;\\n    for (uint256 i = 0; i < num; ++i) {\\n      address to = stream.readAddress();\\n      uint256 amount = stream.readUint();\\n      amountTotal += amount;\\n      IERC20(token).safeTransfer(to, amount);\\n    }\\n    require(msg.value == amountTotal, \\\"RouteProcessor: invalid input amount\\\");\\n  }\\n\\n  /// @notice Distributes input BentoBox tokens from msg.sender to addresses. Tokens should be approved\\n  /// @notice Expected to be called for initial liquidity transfer from the user to pools, so we know exact amounts\\n  /// @param stream [ArrayLength, ...[To, ShareAmount][]]. An array of destinations and token share amounts\\n  /// @param token Token to distribute\\n  /// @return sharesTotal Total shares distributed\\n  function distributeBentoShares(uint256 stream, address token) private returns (uint256 sharesTotal) {\\n    uint8 num = stream.readUint8();\\n    sharesTotal = 0;\\n    for (uint256 i = 0; i < num; ++i) {\\n      address to = stream.readAddress();\\n      uint256 share = stream.readUint();\\n      sharesTotal += share;\\n      bentoBox.transfer(token, msg.sender, to, share);\\n    }\\n  }\\n\\n  /// @notice Distributes ERC20 tokens from RouteProcessor to addresses\\n  /// @notice Quantity for sending is determined by share in 1/65535\\n  /// @notice During routing we can't predict in advance the actual value of internal swaps because of slippage,\\n  /// @notice so we have to work with shares - not fixed amounts\\n  /// @param stream [Token, ArrayLength, ...[To, ShareAmount][]]. Token to distribute. An array of destinations and token share amounts\\n  function distributeERC20Shares(uint256 stream) private {\\n    address token = stream.readAddress();\\n    uint8 num = stream.readUint8();\\n    uint256 amountTotal = IERC20(token).balanceOf(address(this))\\n      - 1;     // slot undrain protection\\n\\n    unchecked {\\n      for (uint256 i = 0; i < num; ++i) {\\n        address to = stream.readAddress();\\n        uint16 share = stream.readUint16();\\n        uint256 amount = (amountTotal * share) / 65535;\\n        amountTotal -= amount;\\n        IERC20(token).safeTransfer(to, amount);\\n      }\\n    }\\n  }\\n\\n  /// @notice Distributes BentoBox tokens from RouteProcessor to addresses\\n  /// @notice Quantity for sending is determined by portions in 1/65535.\\n  /// @notice During routing we can't predict in advance the actual value of internal swaps because of slippage,\\n  /// @notice so we have to work with portions - not fixed amounts\\n  /// @param stream [Token, ArrayLength, ...[To, ShareAmount][]]. Token to distribute. An array of destinations and token share amounts\\n  function distributeBentoPortions(uint256 stream) private {\\n    address token = stream.readAddress();\\n    uint8 num = stream.readUint8();\\n    uint256 amountTotal = bentoBox.balanceOf(token, address(this))\\n      - 1;     // slot undrain protection\\n\\n    unchecked {\\n      for (uint256 i = 0; i < num; ++i) {\\n        address to = stream.readAddress();\\n        uint16 share = stream.readUint16();\\n        uint256 amount = (amountTotal * share) / 65535;\\n        amountTotal -= amount;\\n        bentoBox.transfer(token, address(this), to, amount);\\n      }\\n    }\\n  }\\n\\n  /// @notice Unwraps the Native Token\\n  /// @param receiver Destination of the unwrapped token\\n  /// @param stream [Token]. Token to unwrap native\\n  function unwrapNative(address receiver, uint256 stream) private {\\n    address token = stream.readAddress();\\n    IWETH(token).withdraw( IERC20(token).balanceOf(address(this))\\n      - 1);     // slot undrain protection\\n    payable(receiver).transfer(address(this).balance);\\n  }\\n}\\n\",\"keccak256\":\"0xd6416b287fd3b91e2b75dc3c9c07a76092e622b83486ab448830d1422f285d7c\",\"license\":\"UNLICENSED\"},\"interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0;\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\nstruct StrategyData {\\n    uint64 strategyStartDate;\\n    uint64 targetPercentage;\\n    uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n}\\n\\n/// @notice A rebasing library\\nlibrary RebaseLibrary {\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(Rebase memory total, uint256 elastic) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = (elastic * total.base) / total.elastic;\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(Rebase memory total, uint256 base) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = (base * total.elastic) / total.base;\\n        }\\n    }\\n}\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    /// @dev Reads the Rebase `totals`from storage for a given token\\n    function totals(address token) external view returns (Rebase memory total);\\n\\n    function strategyData(address token) external view returns (StrategyData memory total);\\n\\n    /// @dev Approves users' BentoBox assets to a \\\"master\\\" contract.\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function harvest(\\n        address token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0c12eba7a5b9d22d37ab8883fe22d6a312a90682809dbd11c43f8e6ceaff73bf\",\"license\":\"UNLICENSED\"},\"interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xa6f92ccb525b018c0c209819640e8d746f1134b4c4d9acd4f22d3e170323f1fa\",\"license\":\"GPL-3.0-or-later\"},\"interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.10;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xae8529ae159f784b90fdcd0629bd03bf7b68accc81edccac53357ad08406a378\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516200228e3803806200228e83398101604081905261003191610042565b6001600160a01b0316608052610072565b60006020828403121561005457600080fd5b81516001600160a01b038116811461006b57600080fd5b9392505050565b6080516121b4620000da60003960008181607101528181610e0e01528181610fe7015281816110ce015281816111b9015281816112d1015281816113ac015281816114710152818161151e015281816115ff015281816116c5015261179401526121b46000f3fe60806040526004361061002d5760003560e01c80632646478b146100395780636b2ace871461005f57600080fd5b3661003457005b600080fd5b61004c610047366004611cbb565b6100b8565b6040519081526020015b60405180910390f35b34801561006b57600080fd5b506100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610056565b6000323314610128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616c6c2066726f6d206e6f7420454f4100000000000000000000000000000060448201526064015b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146101f1576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528816906370a0823190602401602060405180830381865afa1580156101c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ec9190611db2565b61020a565b8473ffffffffffffffffffffffffffffffffffffffff16315b604080518082019091528581528551860160208201529091505b8051602082015111156103e25760006102438280516001018051915290565b905060148160ff16101561033a578060ff16600a141561026c57610266826105ba565b506103dc565b8060ff166004141561028657610281826108dc565b6103dc565b8060ff16600314156102ad5761029c828c610a20565b6102a69085611dfa565b93506103dc565b8060ff16600514156102c25761029c82610ab8565b8060ff16600614156102d8576102818783610c52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e6b6e6f776e20636f6d6d616e6420636f6465000000000000000000000000604482015260640161011f565b60188160ff161015610387578060ff166014141561035c57610281828c610da3565b8060ff16601514156103715761028182610ea3565b8060ff16601714156102d857610281828c610f5d565b8060ff166018141561039d5761029c828c611018565b8060ff16601914156103b2576102818261113f565b8060ff16601a14156103c7576102818261133b565b8060ff16601b14156102d8576102818261164e565b50610224565b88831461044b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f57726f6e6720616d6f756e74496e2076616c7565000000000000000000000000604482015260640161011f565b600073ffffffffffffffffffffffffffffffffffffffff891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610513576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528a16906370a0823190602401602060405180830381865afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190611db2565b61052c565b8673ffffffffffffffffffffffffffffffffffffffff16315b90506105388884611dfa565b8110156105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d696e696d616c206f757075742062616c616e63652076696f6c6174696f6e00604482015260640161011f565b6105ab8382611e12565b9b9a5050505050505050505050565b6000806105cd8380516014018051915290565b905060006105e18480516014018051915290565b905060006105f58580516001018051915290565b905060006106098680516014018051915290565b90506000808573ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190611e47565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000821180156106b25750600081115b610718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f57726f6e6720706f6f6c20726573657276657300000000000000000000000000604482015260640161011f565b6000808560ff1660011461072d578284610730565b83835b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301529294509092506000918491908a16906370a0823190602401602060405180830381865afa1580156107a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cc9190611db2565b6107d69190611e12565b905060006107e6826103e5611e97565b9050806107f5856103e8611e97565b6107ff9190611dfa565b6108098483611e97565b6108139190611ed4565b9a506000808960ff1660011461082b578c600061082f565b60008d5b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff8d169063022c0d9f9061089990859085908e9060248101611f85565b600060405180830381600087803b1580156108b357600080fd5b505af11580156108c7573d6000803e3d6000fd5b50505050505050505050505050505050919050565b60006108ee8280516014018051915290565b905060006109028380516001018051915290565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009060019073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190611db2565b6109a39190611e12565b905060005b8260ff16811015610a195760006109c58680516014018051915290565b905060006109d98780516002018051915290565b61ffff8082168602049485900394909150610a0b73ffffffffffffffffffffffffffffffffffffffff881684836117c5565b5050508060010190506109a8565b5050505050565b600080610a338480516001018051915290565b90506000915060005b8160ff16811015610ab0576000610a598680516014018051915290565b90506000610a6d8780516020018051915290565b9050610a798186611dfa565b9450610a9d73ffffffffffffffffffffffffffffffffffffffff871633848461189e565b505080610aa990611fca565b9050610a3c565b505092915050565b600080610acb8380516014018051915290565b90508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b1557600080fd5b505af1158015610b29573d6000803e3d6000fd5b50505050506000610b408480516001018051915290565b90506000925060005b8160ff16811015610bbc576000610b668680516014018051915290565b90506000610b7a8780516020018051915290565b9050610b868187611dfa565b9550610ba973ffffffffffffffffffffffffffffffffffffffff861683836117c5565b505080610bb590611fca565b9050610b49565b50823414610c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f526f75746550726f636573736f723a20696e76616c696420696e70757420616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161011f565b5050919050565b6000610c648280516014018051915290565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff821690632e1a7d4d9060019083906370a0823190602401602060405180830381865afa158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d009190611db2565b610d0a9190611e12565b6040518263ffffffff1660e01b8152600401610d2891815260200190565b600060405180830381600087803b158015610d4257600080fd5b505af1158015610d56573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff861692504780156108fc029250906000818181858888f19350505050158015610d9d573d6000803e3d6000fd5b50505050565b6000610db58380516014018051915290565b90506000610dc98480516020018051915290565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301819052908516604483015260648201839052600060848301529192506302b9446c9060a4015b60408051808303816000875af1158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612003565b505050505050565b6000610eb58280516014018051915290565b8251602080820180519092010184526040517f627dd56a0000000000000000000000000000000000000000000000000000000081529192509073ffffffffffffffffffffffffffffffffffffffff83169063627dd56a90610f1a908490600401612027565b6020604051808303816000875af1158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9d9190611db2565b6000610f6f8380516014018051915290565b90506000610f838480516020018051915290565b6040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152848116604483015260648201839052600060848301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a401610e59565b60008061102b8480516001018051915290565b90506000915060005b8160ff16811015610ab05760006110518680516014018051915290565b905060006110658780516020018051915290565b90506110718186611dfa565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301523360248301528481166044830152606482018490529196507f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc90608401600060405180830381600087803b15801561111457600080fd5b505af1158015611128573d6000803e3d6000fd5b5050505050508061113890611fca565b9050611034565b60006111518280516014018051915290565b905060006111658380516001018051915290565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301529192506000916001917f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec90604401602060405180830381865afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112269190611db2565b6112309190611e12565b905060005b8260ff16811015610a195760006112528680516014018051915290565b905060006112668780516002018051915290565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152306024830152848116604483015261ffff8084168802046064830181905296879003969293507f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b15801561131557600080fd5b505af1158015611329573d6000803e3d6000fd5b50505050505050806001019050611235565b600061134d8280516014018051915290565b905060006113618380516014018051915290565b6040517f4ffe34db00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690634ffe34db906024016040805180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114169190612061565b516040517fdf23b45b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526fffffffffffffffffffffffffffffffff909216917f0000000000000000000000000000000000000000000000000000000000000000169063df23b45b90602401606060405180830381865afa1580156114b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dc91906120d4565b60409081015190517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526fffffffffffffffffffffffffffffffff909216918516906370a0823190602401602060405180830381865afa158015611582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a69190611db2565b6115b09190611dfa565b6115ba9190611e12565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301819052908616604483015260648201839052600060848301529192506302b9446c9060a401610e59565b60006116608280516014018051915290565b905060006116748380516014018051915290565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190611db2565b6040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152848116604483015260006064830152608482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a401610e59565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526118999084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118fc565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610d9d9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611817565b600061195e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a089092919063ffffffff16565b805190915015611899578080602001905181019061197c9190612140565b611899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161011f565b6060611a178484600085611a1f565b949350505050565b606082471015611ab1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161011f565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ada9190612162565b60006040518083038185875af1925050503d8060008114611b17576040519150601f19603f3d011682016040523d82523d6000602084013e611b1c565b606091505b5091509150611b2d87838387611b38565b979650505050505050565b60608315611bcb578251611bc45773ffffffffffffffffffffffffffffffffffffffff85163b611bc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161011f565b5081611a17565b611a178383815115611be05781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011f9190612027565b803573ffffffffffffffffffffffffffffffffffffffff81168114611c3857600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611cb357611cb3611c3d565b604052919050565b60008060008060008060c08789031215611cd457600080fd5b611cdd87611c14565b95506020808801359550611cf360408901611c14565b945060608801359350611d0860808901611c14565b925060a088013567ffffffffffffffff80821115611d2557600080fd5b818a0191508a601f830112611d3957600080fd5b813581811115611d4b57611d4b611c3d565b611d7b847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611c6c565b91508082528b84828501011115611d9157600080fd5b80848401858401376000848284010152508093505050509295509295509295565b600060208284031215611dc457600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115611e0d57611e0d611dcb565b500190565b600082821015611e2457611e24611dcb565b500390565b80516dffffffffffffffffffffffffffff81168114611c3857600080fd5b600080600060608486031215611e5c57600080fd5b611e6584611e29565b9250611e7360208501611e29565b9150604084015163ffffffff81168114611e8c57600080fd5b809150509250925092565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ecf57611ecf611dcb565b500290565b600082611f0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60005b83811015611f2a578181015183820152602001611f12565b83811115610d9d5750506000910152565b60008151808452611f53816020860160208601611f0f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000611fc06080830184611f3b565b9695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ffc57611ffc611dcb565b5060010190565b6000806040838503121561201657600080fd5b505080516020909101519092909150565b60208152600061203a6020830184611f3b565b9392505050565b80516fffffffffffffffffffffffffffffffff81168114611c3857600080fd5b60006040828403121561207357600080fd5b6040516040810181811067ffffffffffffffff8211171561209657612096611c3d565b6040526120a283612041565b81526120b060208401612041565b60208201529392505050565b805167ffffffffffffffff81168114611c3857600080fd5b6000606082840312156120e657600080fd5b6040516060810181811067ffffffffffffffff8211171561210957612109611c3d565b604052612115836120bc565b8152612123602084016120bc565b602082015261213460408401612041565b60408201529392505050565b60006020828403121561215257600080fd5b8151801515811461203a57600080fd5b60008251612174818460208701611f0f565b919091019291505056fea2646970667358221220e45795e28762c80a64d6fe2954c59f6598e34d7af0efbe173c7d48a61897f0bd64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061002d5760003560e01c80632646478b146100395780636b2ace871461005f57600080fd5b3661003457005b600080fd5b61004c610047366004611cbb565b6100b8565b6040519081526020015b60405180910390f35b34801561006b57600080fd5b506100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610056565b6000323314610128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616c6c2066726f6d206e6f7420454f4100000000000000000000000000000060448201526064015b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146101f1576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528816906370a0823190602401602060405180830381865afa1580156101c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ec9190611db2565b61020a565b8473ffffffffffffffffffffffffffffffffffffffff16315b604080518082019091528581528551860160208201529091505b8051602082015111156103e25760006102438280516001018051915290565b905060148160ff16101561033a578060ff16600a141561026c57610266826105ba565b506103dc565b8060ff166004141561028657610281826108dc565b6103dc565b8060ff16600314156102ad5761029c828c610a20565b6102a69085611dfa565b93506103dc565b8060ff16600514156102c25761029c82610ab8565b8060ff16600614156102d8576102818783610c52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e6b6e6f776e20636f6d6d616e6420636f6465000000000000000000000000604482015260640161011f565b60188160ff161015610387578060ff166014141561035c57610281828c610da3565b8060ff16601514156103715761028182610ea3565b8060ff16601714156102d857610281828c610f5d565b8060ff166018141561039d5761029c828c611018565b8060ff16601914156103b2576102818261113f565b8060ff16601a14156103c7576102818261133b565b8060ff16601b14156102d8576102818261164e565b50610224565b88831461044b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f57726f6e6720616d6f756e74496e2076616c7565000000000000000000000000604482015260640161011f565b600073ffffffffffffffffffffffffffffffffffffffff891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610513576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528a16906370a0823190602401602060405180830381865afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190611db2565b61052c565b8673ffffffffffffffffffffffffffffffffffffffff16315b90506105388884611dfa565b8110156105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d696e696d616c206f757075742062616c616e63652076696f6c6174696f6e00604482015260640161011f565b6105ab8382611e12565b9b9a5050505050505050505050565b6000806105cd8380516014018051915290565b905060006105e18480516014018051915290565b905060006105f58580516001018051915290565b905060006106098680516014018051915290565b90506000808573ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190611e47565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000821180156106b25750600081115b610718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f57726f6e6720706f6f6c20726573657276657300000000000000000000000000604482015260640161011f565b6000808560ff1660011461072d578284610730565b83835b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301529294509092506000918491908a16906370a0823190602401602060405180830381865afa1580156107a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cc9190611db2565b6107d69190611e12565b905060006107e6826103e5611e97565b9050806107f5856103e8611e97565b6107ff9190611dfa565b6108098483611e97565b6108139190611ed4565b9a506000808960ff1660011461082b578c600061082f565b60008d5b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff8d169063022c0d9f9061089990859085908e9060248101611f85565b600060405180830381600087803b1580156108b357600080fd5b505af11580156108c7573d6000803e3d6000fd5b50505050505050505050505050505050919050565b60006108ee8280516014018051915290565b905060006109028380516001018051915290565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009060019073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190611db2565b6109a39190611e12565b905060005b8260ff16811015610a195760006109c58680516014018051915290565b905060006109d98780516002018051915290565b61ffff8082168602049485900394909150610a0b73ffffffffffffffffffffffffffffffffffffffff881684836117c5565b5050508060010190506109a8565b5050505050565b600080610a338480516001018051915290565b90506000915060005b8160ff16811015610ab0576000610a598680516014018051915290565b90506000610a6d8780516020018051915290565b9050610a798186611dfa565b9450610a9d73ffffffffffffffffffffffffffffffffffffffff871633848461189e565b505080610aa990611fca565b9050610a3c565b505092915050565b600080610acb8380516014018051915290565b90508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b1557600080fd5b505af1158015610b29573d6000803e3d6000fd5b50505050506000610b408480516001018051915290565b90506000925060005b8160ff16811015610bbc576000610b668680516014018051915290565b90506000610b7a8780516020018051915290565b9050610b868187611dfa565b9550610ba973ffffffffffffffffffffffffffffffffffffffff861683836117c5565b505080610bb590611fca565b9050610b49565b50823414610c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f526f75746550726f636573736f723a20696e76616c696420696e70757420616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161011f565b5050919050565b6000610c648280516014018051915290565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff821690632e1a7d4d9060019083906370a0823190602401602060405180830381865afa158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d009190611db2565b610d0a9190611e12565b6040518263ffffffff1660e01b8152600401610d2891815260200190565b600060405180830381600087803b158015610d4257600080fd5b505af1158015610d56573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff861692504780156108fc029250906000818181858888f19350505050158015610d9d573d6000803e3d6000fd5b50505050565b6000610db58380516014018051915290565b90506000610dc98480516020018051915290565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301819052908516604483015260648201839052600060848301529192506302b9446c9060a4015b60408051808303816000875af1158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612003565b505050505050565b6000610eb58280516014018051915290565b8251602080820180519092010184526040517f627dd56a0000000000000000000000000000000000000000000000000000000081529192509073ffffffffffffffffffffffffffffffffffffffff83169063627dd56a90610f1a908490600401612027565b6020604051808303816000875af1158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9d9190611db2565b6000610f6f8380516014018051915290565b90506000610f838480516020018051915290565b6040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152848116604483015260648201839052600060848301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a401610e59565b60008061102b8480516001018051915290565b90506000915060005b8160ff16811015610ab05760006110518680516014018051915290565b905060006110658780516020018051915290565b90506110718186611dfa565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301523360248301528481166044830152606482018490529196507f00000000000000000000000000000000000000000000000000000000000000009091169063f18d03cc90608401600060405180830381600087803b15801561111457600080fd5b505af1158015611128573d6000803e3d6000fd5b5050505050508061113890611fca565b9050611034565b60006111518280516014018051915290565b905060006111658380516001018051915290565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301529192506000916001917f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec90604401602060405180830381865afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112269190611db2565b6112309190611e12565b905060005b8260ff16811015610a195760006112528680516014018051915290565b905060006112668780516002018051915290565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152306024830152848116604483015261ffff8084168802046064830181905296879003969293507f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b15801561131557600080fd5b505af1158015611329573d6000803e3d6000fd5b50505050505050806001019050611235565b600061134d8280516014018051915290565b905060006113618380516014018051915290565b6040517f4ffe34db00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690634ffe34db906024016040805180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114169190612061565b516040517fdf23b45b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526fffffffffffffffffffffffffffffffff909216917f0000000000000000000000000000000000000000000000000000000000000000169063df23b45b90602401606060405180830381865afa1580156114b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dc91906120d4565b60409081015190517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526fffffffffffffffffffffffffffffffff909216918516906370a0823190602401602060405180830381865afa158015611582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a69190611db2565b6115b09190611dfa565b6115ba9190611e12565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301819052908616604483015260648201839052600060848301529192506302b9446c9060a401610e59565b60006116608280516014018051915290565b905060006116748380516014018051915290565b6040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190611db2565b6040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152848116604483015260006064830152608482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a401610e59565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526118999084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118fc565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610d9d9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611817565b600061195e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a089092919063ffffffff16565b805190915015611899578080602001905181019061197c9190612140565b611899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161011f565b6060611a178484600085611a1f565b949350505050565b606082471015611ab1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161011f565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ada9190612162565b60006040518083038185875af1925050503d8060008114611b17576040519150601f19603f3d011682016040523d82523d6000602084013e611b1c565b606091505b5091509150611b2d87838387611b38565b979650505050505050565b60608315611bcb578251611bc45773ffffffffffffffffffffffffffffffffffffffff85163b611bc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161011f565b5081611a17565b611a178383815115611be05781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011f9190612027565b803573ffffffffffffffffffffffffffffffffffffffff81168114611c3857600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611cb357611cb3611c3d565b604052919050565b60008060008060008060c08789031215611cd457600080fd5b611cdd87611c14565b95506020808801359550611cf360408901611c14565b945060608801359350611d0860808901611c14565b925060a088013567ffffffffffffffff80821115611d2557600080fd5b818a0191508a601f830112611d3957600080fd5b813581811115611d4b57611d4b611c3d565b611d7b847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611c6c565b91508082528b84828501011115611d9157600080fd5b80848401858401376000848284010152508093505050509295509295509295565b600060208284031215611dc457600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115611e0d57611e0d611dcb565b500190565b600082821015611e2457611e24611dcb565b500390565b80516dffffffffffffffffffffffffffff81168114611c3857600080fd5b600080600060608486031215611e5c57600080fd5b611e6584611e29565b9250611e7360208501611e29565b9150604084015163ffffffff81168114611e8c57600080fd5b809150509250925092565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ecf57611ecf611dcb565b500290565b600082611f0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60005b83811015611f2a578181015183820152602001611f12565b83811115610d9d5750506000910152565b60008151808452611f53816020860160208601611f0f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000611fc06080830184611f3b565b9695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611ffc57611ffc611dcb565b5060010190565b6000806040838503121561201657600080fd5b505080516020909101519092909150565b60208152600061203a6020830184611f3b565b9392505050565b80516fffffffffffffffffffffffffffffffff81168114611c3857600080fd5b60006040828403121561207357600080fd5b6040516040810181811067ffffffffffffffff8211171561209657612096611c3d565b6040526120a283612041565b81526120b060208401612041565b60208201529392505050565b805167ffffffffffffffff81168114611c3857600080fd5b6000606082840312156120e657600080fd5b6040516060810181811067ffffffffffffffff8211171561210957612109611c3d565b604052612115836120bc565b8152612123602084016120bc565b602082015261213460408401612041565b60408201529392505050565b60006020828403121561215257600080fd5b8151801515811461203a57600080fd5b60008251612174818460208701611f0f565b919091019291505056fea2646970667358221220e45795e28762c80a64d6fe2954c59f6598e34d7af0efbe173c7d48a61897f0bd64736f6c634300080a0033",
  "devdoc": {
    "author": "Okavango",
    "kind": "dev",
    "methods": {
      "processRoute(address,uint256,address,uint256,address,bytes)": {
        "params": {
          "amountIn": "Amount of the input token",
          "amountOutMin": "Minimum amount of the output token",
          "tokenIn": "Address of the input token",
          "tokenOut": "Address of the output token"
        },
        "returns": {
          "amountOut": "Actual amount of the output token"
        }
      }
    },
    "title": "A route processor for the Sushi Aggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "processRoute(address,uint256,address,uint256,address,bytes)": {
        "notice": "Processes the route generated off-chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}